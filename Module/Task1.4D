#include <IRremote.h>

const int motor = 13;
const int Led = 12;
const int SOIL_MOISTURE_PIN = A0;
const int PIR_PIN = 4; // PIR sensor pin
const int RED_LED = 8;
const int GREEN_LED = 7;
const int RECV_PIN = 2;
const int BLUE_LED = PB5;

const uint16_t timer = 0; // counter +
const uint16_t compare = 31250; // compare thresholds 

int percentValue = 0;
volatile bool interruptFlag = false;
bool powerOn = true; // Global variable to track power state
int red_state = LOW;
int green_state = LOW;
int blue_state = LOW;

IRrecv irrecv(RECV_PIN);
decode_results results;

void setup() {
  // LEDs
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);

  // PIR + IR sensors
  pinMode(PIR_PIN, INPUT); // PIR sensor pin
  irrecv.enableIRIn();

  attachInterrupt(digitalPinToInterrupt(PIR_PIN), PIR_trigger, CHANGE); // PIR sensor interrupt
  attachInterrupt(digitalPinToInterrupt(RECV_PIN), IR_trigger, CHANGE); // IR sensor interrupt
  Serial.begin(9600);
  
  pinMode(motor, OUTPUT);
  pinMode(Led, OUTPUT);
  pinMode(SOIL_MOISTURE_PIN, INPUT);

  DDRB |= (1 << BLUE_LED);
  TCCR1A = 0;
  TCCR1B |= (1 << CS12);
  TCCR1B &= ~(1 << CS11);
  TCCR1B &= ~(1 << CS10);
  TCNT1 = timer;
  OCR1A = compare;
  TIMSK1 = (1 << OCIE1A);
  // Enable interrupts
  sei();
}

void loop() {
  digitalWrite(RED_LED, red_state); 
  digitalWrite(GREEN_LED, green_state); 

  if (interruptFlag) {
    Serial.println("IR signal received! Toggle motor and LED.");
    toggleMotorAndLed();
    interruptFlag = false;  // Reset the flag
  }

  if (powerOn) {  // Only execute if power is on
    int value = analogRead(SOIL_MOISTURE_PIN);
    float Moisture = value * 500.0 / 1023.0;

    Serial.print("Moisture Level: ");
    Serial.println(Moisture);

    if (Moisture < 220) {
      Serial.println("Moisture is low. Turning on motor and LED.");
      digitalWrite(motor, HIGH);
      digitalWrite(Led, HIGH);
    } else {
      Serial.println("Moisture is sufficient. Turning off motor and LED.");
      digitalWrite(motor, LOW);
      digitalWrite(Led, LOW);
    }
  }

  delay(1000);
}

void toggleMotorAndLed() {
  if (digitalRead(motor) == HIGH) {
    digitalWrite(motor, LOW);
    digitalWrite(Led, LOW);
  } else {
    digitalWrite(motor, HIGH);
    digitalWrite(Led, HIGH);
  }
}

void toggleMotorAndLedOFF() {
  digitalWrite(motor, LOW);
  digitalWrite(Led, LOW);
  powerOn = false;  // Turn off power
}

void PIR_trigger() {
  red_state = !red_state;
  Serial.println("PIR Interrupt.");
}

void IR_trigger() {
  if (irrecv.decode(&results)) {
    Serial.println(results.value, DEC);
    if (results.value == 16580863) {
      green_state = !green_state; 
      Serial.println("IR Interrupt.");
      toggleMotorAndLedOFF();
    }
    irrecv.resume();
  }
}

ISR(TIMER1_COMPA_vect) {
  TCNT1 = timer;
  PORTB ^= (1 << BLUE_LED);
  Serial.println("Timer Interrupt.");
}
